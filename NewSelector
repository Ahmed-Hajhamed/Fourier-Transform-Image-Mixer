import sys
import numpy as np
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QVBoxLayout, QSlider, QPushButton, QWidget, QHBoxLayout
from PyQt5.QtCore import Qt, QRect, QPoint
from PyQt5.QtGui import QPixmap, QImage, QPainter, QColor

class RectangleSelector(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Rectangle Selector with Mouse and Slider")
        self.setGeometry(100, 100, 800, 600)

        # Main image data
        self.image_width = 500
        self.image_height = 500
        self.image_data = np.random.randint(0, 255, (self.image_height, self.image_width, 3), dtype=np.uint8)
        self.image = self.numpy_to_qimage(self.image_data)

        # Rectangle properties
        self.rect_size = 100  # Default size of the rectangle
        self.rect_x = 200  # Default x position
        self.rect_y = 200  # Default y position

        # Mouse drag properties
        self.dragging = False
        self.drag_start = QPoint()

        # Main UI setup
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()

        # QLabel for the image
        self.label = QLabel(self)
        self.label.setMouseTracking(True)  # Enable mouse tracking
        self.label.installEventFilter(self)  # Filter events for mouse handling
        self.update_image_with_rectangle()
        layout.addWidget(self.label)

        # Slider for rectangle size
        self.slider = QSlider(Qt.Horizontal)
        self.slider.setMinimum(10)
        self.slider.setMaximum(400)
        self.slider.setValue(self.rect_size)
        self.slider.valueChanged.connect(self.update_rectangle_size)
        layout.addWidget(self.slider)

        # Buttons
        btn_layout = QHBoxLayout()

        self.inside_button = QPushButton("Get Inside Indices")
        self.inside_button.clicked.connect(self.get_inside_indices)
        btn_layout.addWidget(self.inside_button)

        self.outside_button = QPushButton("Get Outside Indices")
        self.outside_button.clicked.connect(self.get_outside_indices)
        btn_layout.addWidget(self.outside_button)

        layout.addLayout(btn_layout)

        # Set main layout
        container = QWidget()
        container.setLayout(layout)
        self.setCentralWidget(container)

    def numpy_to_qimage(self, data):
        """Convert numpy array to QImage."""
        height, width, channels = data.shape
        bytes_per_line = channels * width
        return QImage(data, width, height, bytes_per_line, QImage.Format_RGB888)

    def update_image_with_rectangle(self):
        """Redraw the image with the rectangle."""
        pixmap = QPixmap.fromImage(self.image)
        painter = QPainter(pixmap)
        painter.setPen(QColor(255, 0, 0))  # Red border
        painter.drawRect(QRect(self.rect_x, self.rect_y, self.rect_size, self.rect_size))
        painter.end()
        self.label.setPixmap(pixmap)

    def update_rectangle_size(self, value):
        """Update rectangle size when slider is changed."""
        self.rect_size = value
        self.update_image_with_rectangle()

    def get_inside_indices(self):
        """Return indices of pixels inside the rectangle."""
        x_start = self.rect_x
        x_end = min(self.rect_x + self.rect_size, self.image_width)
        y_start = self.rect_y
        y_end = min(self.rect_y + self.rect_size, self.image_height)

        indices = [(x, y) for y in range(y_start, y_end) for x in range(x_start, x_end)]
        print(f"Inside Indices: {indices}")

    def get_outside_indices(self):
        """Return indices of pixels outside the rectangle."""
        inside_set = set()
        x_start = self.rect_x
        x_end = min(self.rect_x + self.rect_size, self.image_width)
        y_start = self.rect_y
        y_end = min(self.rect_y + self.rect_size, self.image_height)

        # Collect inside indices
        for y in range(y_start, y_end):
            for x in range(x_start, x_end):
                inside_set.add((x, y))

        # Collect all indices
        all_indices = set((x, y) for y in range(self.image_height) for x in range(self.image_width))

        # Subtract inside indices
        outside_indices = all_indices - inside_set
        print(f"Outside Indices: {list(outside_indices)}")

    def eventFilter(self, source, event):
        """Handle mouse events for dragging."""
        if source == self.label:
            if event.type() == event.MouseButtonPress and event.button() == Qt.LeftButton:
                # Start dragging
                self.dragging = True
                self.drag_start = event.pos()

            elif event.type() == event.MouseMove and self.dragging:
                # Calculate the rectangle's new position
                delta = event.pos() - self.drag_start
                self.rect_x = max(0, min(self.rect_x + delta.x(), self.image_width - self.rect_size))
                self.rect_y = max(0, min(self.rect_y + delta.y(), self.image_height - self.rect_size))
                self.drag_start = event.pos()
                self.update_image_with_rectangle()

            elif event.type() == event.MouseButtonRelease and event.button() == Qt.LeftButton:
                # Stop dragging
                self.dragging = False

        return super().eventFilter(source, event)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = RectangleSelector()
    window.show()
    sys.exit(app.exec_())
