import sys
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QGridLayout, QVBoxLayout, QHBoxLayout,
    QLabel, QPushButton, QComboBox, QSlider, QProgressBar, QFileDialog,
    QWidget, QGraphicsView, QGraphicsScene
)
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from PyQt5.QtGui import QPixmap, QImage, QMouseEvent


class FTImageViewer(QGraphicsView):
    def _init_(self, parent=None):
        super()._init_(parent)
        self.scene = QGraphicsScene(self)
        self.setScene(self.scene)
        self.image_item = None
        self.init_ui()

    def init_ui(self):
        self.setDragMode(self.ScrollHandDrag)
        self.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.viewport().setMouseTracking(True)

    def display_image(self, pixmap: QPixmap):
        self.scene.clear()
        self.image_item = self.scene.addPixmap(pixmap)
        self.fitInView(self.image_item, Qt.KeepAspectRatio)

    def mousePressEvent(self, event: QMouseEvent):
        if event.button() == Qt.LeftButton:
            self.open_image()

    def open_image(self):
        file_name, _ = QFileDialog.getOpenFileName(self, "Open Image", "", "Images (*.png *.jpg *.bmp)")
        if file_name:
            self.display_image(QPixmap(file_name))  # Placeholder for actual grayscale conversion


class MixerApp(QMainWindow):
    def _init_(self):
        super()._init_()
        self.setWindowTitle("FT Magnitude/Phase Mixer")
        self.init_ui()

    def init_ui(self):
        main_layout = QVBoxLayout()
        image_grid = QGridLayout()

        # Image viewers and their settings
        self.image_viewers = [FTImageViewer() for _ in range(4)]
        self.combo_boxes = []
        for i, viewer in enumerate(self.image_viewers):
            viewer_widget = QVBoxLayout()
            label = QLabel(f"Image {i + 1}")
            combo = QComboBox()
            combo.addItems(["Original", "FT Magnitude", "FT Phase", "FT Real", "FT Imaginary"])
            self.combo_boxes.append(combo)
            viewer_widget.addWidget(label)
            viewer_widget.addWidget(viewer)
            viewer_widget.addWidget(combo)
            image_grid.addLayout(viewer_widget, i // 2, i % 2)

        # Output viewports
        output_layout = QHBoxLayout()
        self.output_viewers = [FTImageViewer() for _ in range(2)]
        for i, viewer in enumerate(self.output_viewers):
            output_widget = QVBoxLayout()
            label = QLabel(f"Output {i + 1}")
            output_widget.addWidget(label)
            output_widget.addWidget(viewer)
            output_layout.addLayout(output_widget)

        # Sliders for mixing settings
        mixer_controls = QVBoxLayout()
        self.sliders = []
        for label_text in ["Image 1 Weight", "Image 2 Weight", "Image 3 Weight", "Image 4 Weight"]:
            slider_layout = QHBoxLayout()
            label = QLabel(label_text)
            slider = QSlider(Qt.Horizontal)
            slider.setRange(0, 100)
            slider.setValue(50)
            slider_layout.addWidget(label)
            slider_layout.addWidget(slider)
            mixer_controls.addLayout(slider_layout)
            self.sliders.append(slider)

        # Brightness/Contrast placeholders
        brightness_contrast_label = QLabel("Adjust Brightness/Contrast (Drag on Viewports)")
        mixer_controls.addWidget(brightness_contrast_label)

        # Region Selection Slider
        region_slider_layout = QHBoxLayout()
        region_slider_label = QLabel("Region Size")
        self.region_slider = QSlider(Qt.Horizontal)
        self.region_slider.setRange(0, 100)
        self.region_slider.setValue(50)
        region_slider_layout.addWidget(region_slider_label)
        region_slider_layout.addWidget(self.region_slider)
        mixer_controls.addLayout(region_slider_layout)

        # Progress bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setValue(0)
        mixer_controls.addWidget(self.progress_bar)

        # Combine all layouts
        main_layout.addLayout(image_grid)
        main_layout.addLayout(output_layout)
        main_layout.addLayout(mixer_controls)

        # Set central widget
        central_widget = QWidget()
        central_widget.setLayout(main_layout)
        self.setCentralWidget(central_widget)

    def start_mixing(self):
        # Placeholder for actual mixing logic and threading
        self.progress_bar.setValue(50)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MixerApp()
    window.resize(1200, 800)
    # apply_stylesheet(app, theme='dark_teal.xml')

    window.show()
    sys.exit(app.exec_())